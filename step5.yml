- hosts: undercloud
  gather_facts: false
  tags: [venv]
  tasks:
    - name: ensure python virtualenv command is installed
      package:
        name: python2-virtualenv
        state: present

# The following play is an ugly hack: we need a newer version of 
# python-openstacksdk than is available in RHEL 8. It's simple enough
# to install into a virtualenv, we we need a virtualenv *without*
# --system-site-packages...in which we case we lose access to the selinux
# module. So we symlink that in after creating the virtualenv.
- hosts: undercloud
  gather_facts: false
  become: true
  become_user: stack
  tags: [venv]
  tasks:
    - name: create virtualenv
      command: >-
        virtualenv ~/openstackenv
      args:
        creates: ~/openstackenv

    - name: install updated version of python-openstacksdk
      pip:
        virtualenv: ~/openstackenv
        name: python-openstacksdk
        state: latest

    - name: symlink system selinux module into virtualenv
      shell: |
        selinux_module_path=$(python -c 'import selinux; import os; \
          print(os.path.dirname(selinux.__file__))')
        ln -sf $selinux_module_path ~/openstackenv/lib/python2.7/site-packages/

        selinux_lib_path=$(python -c 'import _selinux; import os; \
          print(_selinux.__file__)')
        ln -sf $selinux_lib_path ~/openstackenv/lib/python2.7/site-packages/
      register: linkit

- hosts: undercloud
  gather_facts: false
  become: true
  become_user: stack
  tags: [always]
  tasks:
    - name: set new python interpreter path
      set_fact:
        ansible_python_interpreter: /home/stack/openstackenv/bin/python

    - name: get stack user home directory
      shell: "echo $HOME"
      register: stack_home
      changed_when: false

    - set_fact:
        stack_home: "{{ stack_home.stdout }}"

- hosts: undercloud
  gather_facts: false
  become: true
  become_user: stack
  tags: [credentials]
  tasks:
    - name: read credentials
      shell: |
        . ~/{{ item }}

        cat <<EOF
        {
          "os_password": "$OS_PASSWORD",
          "os_username": "$OS_USERNAME",
          "os_region_name": "$OS_REGION_NAME",
          "os_auth_url": "$OS_AUTH_URL",
          "os_project_name": "$OS_PROJECT_NAME",
          "os_cloudname": "$OS_CLOUDNAME",
          "os_identity_api_version": "$OS_IDENTITY_API_VERSION"
        }
        EOF
      register: credentials
      loop:
        - stackrc
        - overcloudrc

    - name: create openstack config directory
      file:
        path: ~/.config/openstack
        state: directory

    - name: initialize clouds.yaml
      lineinfile:
        path: ~/.config/openstack/clouds.yaml
        create: true
        line: "clouds:"
        insertbefore: BOF

    - name: add undercloud and overcloud to clouds.yaml
      blockinfile:
        path: ~/.config/openstack/clouds.yaml
        mode: "0700"
        marker: "# {mark} CLOUD {{ creds.os_cloudname }}"
        block: |
          # Dummy line to make Ansible happy
            {{ creds.os_cloudname }}:
              auth:
                username: "{{ creds.os_username }}"
                project_name: "{{ creds.os_project_name }}"
                password: "{{ creds.os_password }}"
                auth_url: "{{ creds.os_auth_url }}"
                user_domain_name: Default
                project_domain_name: Default
              region: "{{ creds.os_region_name }}"
              identity_api_version: "{{ creds.os_identity_api_version }}"
              interface: internal
      vars:
        creds: "{{ item.stdout|from_json }}"
      loop: "{{ credentials.results }}"

    - name: create projects
      os_project:
        cloud: overcloud
        name: "{{ item }}"
        domain: default
      loop: "{{ os_projects }}"
      loop_control:
        label: "{{ item }}"

    - name: create users
      os_user: "{{ item|combine({'cloud': 'overcloud', 'domain': 'default'}) }}"
      loop: "{{ os_users }}"
      loop_control:
        label: "{{ item.name }}"

    - name: assign user roles
      os_user_role:
        cloud: overcloud
        user: "{{ item.name }}"
        project: "{{ item.default_project }}"
        role: member
      loop: "{{ os_users }}"
      loop_control:
        label: "{{ item.default_project }}:{{ item.name }}"

    - name: read overcloud auth url
      shell: |
        . ~/overcloudrc
        echo "$OS_AUTH_URL"
        echo "$OS_REGION_NAME"
        echo "$OS_IDENTITY_API_VERSION"
      register: auth_url

    - name: add users to clouds.yaml
      blockinfile:
        path: ~/.config/openstack/clouds.yaml
        mode: "0700"
        marker: "# {mark} USER {{ user.name }}"
        block: |
          # Dummy line to make ansible happy
            overcloud-{{ user.name }}:
              auth:
                username: "{{ user.name }}"
                project_name: "{{ user.default_project }}"
                password: "{{ user.password }}"
                auth_url: "{{ auth_url.stdout_lines[0] }}"
                user_domain_name: Default
                project_domain_name: Default
              region: "{{ auth_url.stdout_lines[1] }}"
              identity_api_version: "{{ auth_url.stdout_lines[2] }}"
              interface: internal
      loop: "{{ os_users }}"
      loop_control:
        loop_var: user

- hosts: undercloud
  gather_facts: false
  tags: [hosts]
  tasks:
    - name: get hosts entries for overcloud
      become: true
      become_user: stack
      command: >-
        openstack --os-cloud undercloud stack output
        show overcloud HostsEntry -f value -c output_value
      changed_when: false
      register: overcloud_hosts_entry

    - name: write overcloud hosts to /etc/hosts
      blockinfile:
        path: /etc/hosts
        block: |-
          {{ overcloud_hosts_entry.stdout }}

- hosts: undercloud
  gather_facts: false
  become: true
  become_user: stack
  tags: [admin, images]
  tasks:
    - name: create image download directory
      file:
        path: "{{ stack_home }}/demo_images"
        state: directory

    - name: download images
      get_url:
        url: "{{ item.url }}"
        dest: "{{ stack_home }}/demo_images/{{ item.name }}.{{ item.format }}"
      loop: "{{ os_images }}"
      loop_control:
        label: "{{ item.name }}"

    - name: upload images to glance
      os_image:
        cloud: overcloud
        name: "{{ item.name }}"
        container_format: bare
        disk_format: "{{ item.format }}"
        filename: "{{ stack_home }}/demo_images/{{ item.name }}.{{ item.format }}"
        is_public: true
        properties: "{{ item.properties|default(omit) }}"
      loop: "{{ os_images }}"

- hosts: undercloud
  gather_facts: false
  become: true
  become_user: stack
  tags: [admin, compute]
  tasks:
    - name: create flavors
      os_nova_flavor: "{{ item|combine({'cloud': 'overcloud'}) }}"
      loop: "{{ os_flavors }}"
      loop_control:
        label: "{{ item.name }}"

- hosts: undercloud
  gather_facts: false
  become: true
  become_user: stack
  tags: [admin, network]
  tasks:
    - name: create public network
      tags: [network]
      os_network:
        cloud: overcloud
        name: public
        external: true
        provider_network_type: flat
        provider_physical_network: datacentre

    - name: create public network subnet
      os_subnet:
        cloud: overcloud
        network_name: public
        name: public-subnet
        cidr: "{{ floating_network_cidr }}"
        enable_dhcp: false

- hosts: undercloud
  gather_facts: false
  become: true
  become_user: stack
  tags: [user]
  vars:
    networks:
      - name: net0
        subnets:
          - name: net0-subnet0
            cidr: 192.168.17.0/24
            dns_nameservers:
              - 8.8.8.8
              - 8.8.4.4
            allocation_pool_start: 192.168.17.10
            allocation_pool_end: 192.168.17.200
    routers:
      - name: router0
        subnets:
          - net0-subnet0
        external_gateway: public
    security_groups:
      - name: default
        rules:
          - protocol: tcp
          - protocol: udp
          - protocol: icmp
  tasks:
    - name: create networks
      os_network:
        cloud: overcloud-demo
        name: "{{ item.name }}"
      loop: "{{ networks }}"

    - name: create subnets
      os_subnet: >-
        {{
        item.1|combine({
        'cloud': 'overcloud-demo',
        'network_name': item.0.name
        })
        }}
      loop: "{{ networks|subelements('subnets') }}"

    - name: create routers
      os_router:
        cloud: overcloud-demo
        name: "{{ item.name}}"
        network: "{{ item.external_gateway }}"
        interfaces: "{{ item.subnets }}"
      loop: "{{ routers }}"

    - name: create security groups
      os_security_group:
        cloud: overcloud-demo
        name: "{{ item.name }}"
      loop: "{{ security_groups }}"

    - name: create security group rules
      os_security_group_rule: >-
        {{
        item.1|combine({
        'cloud': 'overcloud-demo',
        'security_group': item.0.name
        })
        }}
      loop: "{{ security_groups|subelements('rules') }}"

    - name: create keypair
      tags: [keypair]
      os_keypair:
        cloud: overcloud-demo
        name: default
        public_key_file: "{{ stack_home }}/.ssh/id_rsa.pub"
